// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  USER
  ADMIN
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  password        String
  confirmPassword String
  role            userRole? @default(USER)
  isActive        Boolean?  @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  order           Order[]
  Cart            Cart[]
}

model Product {
  id        String      @id @default(uuid())
  name      String
  photo     String
  price     String
  instock   Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    String // Foreign key for the User
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[] // A cart can have multiple cart items
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String // Foreign key for the Cart
  productId String // Foreign key for the Product
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  totalAmount Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?
  OrderItem   OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String // Foreign key for the Order
  productId String // Foreign key for the Product
  quantity  Int
  price     String
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
